#define LED_PIN 8
#define BUTTON_PIN 7
#include<Servo.h>
#define servoPin  9 // Arduino pin connected to Servo Motor's pin

Servo Myservo;
int pos=0;
int pos2=0;
long offAt=0;
long offAtservo=2147483647;
long offAtservo2=2147483647;
bool IsClose= true;
bool IsCloseServo= true;
//int angle = 0;
//int speed = 0;
//bool Direction = true; 
//int switchState = 0; //Set Switch State
//int lastSwitchState = 0; //previous state of the button



#include <Wire.h> 
#include <LiquidCrystal_I2C.h>


LiquidCrystal_I2C lcd(0x27, 16,2); 


// constants won't change

#define TRIG_PIN   12  // Arduino pin connected to Ultrasonic Sensor's TRIG pin
#define ECHO_PIN   11 // Arduino pin connected to Ultrasonic Sensor's ECHO pin
const int DISTANCE_THRESHOLD  = 10; // centimeters
// variables will change:
long duration_us, distance_cm;



void setup() {
   Serial.begin (9600);       // initialize serial port
  pinMode(LED_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT);
  pinMode(TRIG_PIN, OUTPUT); // set arduino pin to output mode
  pinMode(ECHO_PIN, INPUT);  // set arduino pin to input mode
  Myservo.attach(servoPin);
  lcd.init();
  lcd.begin(16,2);
  lcd.backlight();
  
}




void loop() {


  
  if( (digitalRead(LED_PIN) == LOW ) && (digitalRead(BUTTON_PIN) == LOW) ) //if LED is off  and button is pressed [low because it has pullup resistor]
  { 
    digitalWrite(LED_PIN, HIGH);
    offAt = millis() + 2000; //store var of now + 3 seconds
    lcd.print("WELCOME!!!!!!!!");
   
  }
  
  if(digitalRead(LED_PIN) == HIGH) //if led is on
  {
      if(millis() >= offAt) //see if it's time to turn off LED
      {
         digitalWrite(LED_PIN, LOW); //it's time. this also re-enables the button
          lcd.clear();
        
      }
  }


  
 

   
if (digitalRead(BUTTON_PIN) == LOW &&  (IsClose==true) && millis() <= offAtservo  ) {
    offAtservo = millis() + 250; //store var of now + 90 DEGREES
     IsClose=false; 
     pos=0;
     pos2=0;
  }
    if (millis() <= offAtservo && !IsClose ){  
        Myservo.write(180);  
    }
     else {
       Myservo.write(90);  
       offAtservo = 2147483647;
       IsClose=true;
     }



  // generate 10-microsecond pulse to TRIG pin
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
 digitalWrite(TRIG_PIN, LOW);

  // measure duration of pulse from ECHO pin
  duration_us = pulseIn(ECHO_PIN, HIGH);
  // calculate the distance
  distance_cm = duration_us*0.017;

  if(distance_cm>5)
  {
    digitalWrite(10, LOW);
   
  }
  else
  {
    pos += 1;
    if ((IsCloseServo==true) && millis() <= offAtservo2  &&  pos<50) {
    offAtservo2 = millis() + 250; //store var of now + 90 DEGREES
     IsCloseServo=false; 
     
  }
    if (millis() <= offAtservo2 && !IsCloseServo ){  
        Myservo.write(0);  
        digitalWrite(10, HIGH);
    }
     else {
       Myservo.write(90);  
       IsCloseServo=true;
       offAtservo2 = 2147483647;
       digitalWrite(10, LOW);
     }
   }
 if(distance_cm<30)
  {
    digitalWrite(10, LOW);
   
  }
  else
  {
    pos2 += 1;
    if ((IsCloseServo==true) && millis() <= offAtservo2  &&  pos2<70) {
    offAtservo2 = millis() + 250; //store var of now + 90 DEGREES
     IsCloseServo=false; 
     
  }
    if (millis() <= offAtservo2 && !IsCloseServo ){  
        Myservo.write(0);  
        digitalWrite(10, HIGH);
    }
     else {
       Myservo.write(90);  
       IsCloseServo=true;
       offAtservo2 = 2147483647;
       digitalWrite(10, LOW);
     }
   }


  //print the value to Serial Monitor
  Serial.print("distance: ");
  Serial.print(distance_cm);
  Serial.println(" cm");
   
}